name: Build PostgreSQL with Extensions

on:
  push:
    branches: [ main, master ]
    paths:
      - 'Dockerfile'
      - 'init-extensions.sql'
      - '.github/workflows/build-image.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'Dockerfile'
      - 'init-extensions.sql'
  workflow_dispatch:
    inputs:
      pg_version:
        description: 'PostgreSQL version'
        required: true
        default: '17.5'
        type: string
      pgvector_version:
        description: 'pgvector version'
        required: true
        default: '0.8.0'
        type: string
      timescaledb_version:
        description: 'TimescaleDB version'
        required: true
        default: '2.20.3'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Fixed PostgreSQL version - if you change this, also update the Dockerfile
  PG_VERSION: 17.5

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      # Set versions from workflow inputs or defaults
      - name: Set version parameters
        id: version-params
        run: |
          # Use input for PostgreSQL version, or default from env
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.pg_version }}" ]]; then
            PG_VERSION="${{ github.event.inputs.pg_version }}"
          else
            PG_VERSION="${{ env.PG_VERSION }}"
          fi
          
          # Extract extension versions from Dockerfile or inputs
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.pgvector_version }}" ]]; then
            PGVECTOR_VERSION="${{ github.event.inputs.pgvector_version }}"
          else
            PGVECTOR_VERSION=$(grep 'ARG PGVECTOR_VERSION=' Dockerfile | head -1 | cut -d'=' -f2)
          fi
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.timescaledb_version }}" ]]; then
            TIMESCALEDB_VERSION="${{ github.event.inputs.timescaledb_version }}"
          else
            TIMESCALEDB_VERSION=$(grep 'ARG TIMESCALEDB_VERSION=' Dockerfile | head -1 | cut -d'=' -f2)
          fi
          
          # Extract major version for tags
          PG_MAJOR_VERSION=$(echo "${PG_VERSION}" | cut -d'.' -f1)
          
          # Create full version tag
          FULL_VERSION_TAG="full-${PG_VERSION}-pgv${PGVECTOR_VERSION}-tsdb${TIMESCALEDB_VERSION}"
          
          # Output all version information
          echo "pg_major_version=${PG_MAJOR_VERSION}" >> $GITHUB_OUTPUT
          echo "pg_version=${PG_VERSION}" >> $GITHUB_OUTPUT
          echo "pgvector_version=${PGVECTOR_VERSION}" >> $GITHUB_OUTPUT
          echo "timescaledb_version=${TIMESCALEDB_VERSION}" >> $GITHUB_OUTPUT
          echo "full_version_tag=${FULL_VERSION_TAG}" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.version-params.outputs.pg_major_version }},enable={{is_default_branch}}
            type=raw,value=${{ steps.version-params.outputs.pg_version }},enable={{is_default_branch}}
            type=raw,value=${{ steps.version-params.outputs.full_version_tag }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ steps.version-params.outputs.pg_version }}
            type=semver,pattern={{major}},value=${{ steps.version-params.outputs.pg_version }}



      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PG_VERSION=${{ steps.version-params.outputs.pg_version }}
            PGVECTOR_VERSION=${{ steps.version-params.outputs.pgvector_version }}
            TIMESCALEDB_VERSION=${{ steps.version-params.outputs.timescaledb_version }}
          
      - name: Image digest
        run: echo ${{ steps.build-and-push.outputs.digest }}
